#!/bin/bash

# Umask that lets the group have permissions to default files.
# Might have to put this in the regular `.bashrc` b/c this is sourced after
# the interactive check in that file, if it has one.
umask 0002

# Enable colors for ls, etc.  Prefer $HOME/.dir_colors #64489
if [[ -f ~/.dir_colors ]]; then
	eval `dircolors -b ~/.dir_colors`
elif [[ -f /etc/DIR_COLORS ]]; then
	eval `dircolors -b /etc/DIR_COLORS`
fi
if ! ls --color >&/dev/null; then
	alias l='ls -CFh'
    # Makes it work on OSX
    export CLICOLOR=""
else
	alias l='ls -CFh --color'
fi
alias la='l -a'
alias ll='la -l'
unalias d >&/dev/null
function d() {
    if [[ $# -eq 0 ]]; then
        find . -maxdepth 1 -mindepth 1 -print0 |
            sort -z |
            xargs -0 du -hs
    else
        du -hs "$@"
    fi    
}

unalias v >&/dev/null
unset v
if type -t nvim >& /dev/null; then
	EDITOR=nvim
elif type -t vim >& /dev/null; then
	EDITOR=vim
elif type -t vi >& /dev/null; then
	EDITOR=vi
fi
VISUAL=$EDITOR
export EDITOR VISUAL
function v() {
    for arg in "$@"; do
        if [[ -e "$arg" && $(du -k "$arg"|cut -f1) -ge 1024 ]]; then
            less "$@"
            return
        fi
    done
    "$EDITOR" "$@"
}
if [[ $OSTYPE == 'darwin'* ]]; then
    alias vv='v /tmp/s; pbcopy </tmp/s'
else
    alias vv='v /tmp/s'
fi

alias mv='mv -i'
alias cp='cp -i'
alias xa='xargs -I \{\} -n 1 -P 50'

if ! grep --color >&/dev/null; then
	alias grep="grep --color"
fi
alias g='grep -iE'
alias gr='grep -RinsEH'

function p() {
    if [[ 0 -eq $# ]]; then
        ps -efww
    else
        ps -efww | g "$@"
    fi
}

if cal -3 >&/dev/null; then
	alias cal='cal -3'
fi

# PATH stuff:  The user's bin is more important than everything, then
# profile after everything else, and then finally the local dir at the end.
PATH="$HOME/bin:$PATH"
PATH="$PATH:$HOME/profile"
PATH="$PATH:."
export PATH

# Check the window size after every command.
shopt -s checkwinsize

# enable bash completion in interactive shells
if [ -f /etc/bash_completion -a -z "$BASH_COMPLETION" ]; then
    . /etc/bash_completion
fi

# HISTORY things
shopt -s histappend
export HISTIGNORE="&:[ ]*:bg:fg:exit"
export HISTFILESIZE=999999
export HISTSIZE=999999

# When do you _not_ want extended globbing?
shopt -s extglob

# Less is broken: http://seclists.org/fulldisclosure/2014/Nov/74
export LESS=FRX
unset LESSOPEN
unset LESSCLOSE

# This is what I use to change directories (dirs).
# If given no arguments (args) change dir to `$HOME`.
# If one arg is given and it exists, change dir to it, or if the arg is `-`
# change dir to `$OLDPWD` (the same as the regular `cd`).
# This does not use `$CDPATH` instead it is always `$PWD:$HOME`.
# Otherwise (the one argument doesn't exist or there is more than 1 argument
# then if there is a '/' in any argument, print an error, if not then go
# through each one in order and append to the path-to-change-to the directory,
# the directory or a directory that has the argument as a sub-string (if there
# are more than one match, print an error), and if none, then check the
# sub-directories for it, then continue with the rest of the arguments.
# If no matches are found, try again from $HOME.
# Will always follow symlinks.

alias ..='cd ..'
c_error_str=""
c_found_dir=""
c_glob_one_level_deep() {
    c_error_str="No matches found for \"$2\" in \"$1\"."
    c_found_dir=""
    while IFS= read -r -d $'\0' dir; do
        if [[ -z "$c_found_dir" ]]; then
            c_error_str=""
            c_found_dir=$dir
        else
            c_error_str="Multiple matches found for \"$2\" in \"$1\"."
            return
        fi
    done < <(find -L "$1" -maxdepth 1 -iname '*'"$2"'*' -and -type d -print0)
}
c() {
    if [[ $# -eq 0 ]]; then
        cd "$HOME"
        return 0
    elif [[ $# -eq 1 ]]; then
        if [[ -d "$1" ]]; then
            cd "$1"
            return
        elif [[ -d "${HOME}/$1" ]]; then  # In case '.' is not in the path
            echo "${HOME}/$1"
            cd "${HOME}/$1"
            return
        elif [[ "-" == "$1" ]]; then
            echo "$OLDPWD"
            cd "$OLDPWD"
            return
        fi
    fi
    chp=$PWD
    for arg; do
        if [[ $arg == *"/"* ]]; then
            echo "Argument \"$arg\" contains a slash, so won't glob." >&2
            return
        fi
        c_glob_one_level_deep "$chp" "$arg"
        if [[ -z "$c_error_str" ]]; then
            chp=$c_found_dir
        else
            break
        fi
    done
    if [[ -z "$c_error_str" ]]; then
        echo "$chp"
        cd "$chp"
        return
    elif [[ "$PWD" != "$HOME" ]]; then
        c_error_str_old=$c_error_str
        chp=$HOME
        for arg; do
            # Don't need the '/' check as it was done above.
            c_glob_one_level_deep "$chp" "$arg"
            if [[ -z "$c_error_str" ]]; then
                chp=$c_found_dir
            else
                break
            fi
        done
        if [[ -z "$c_error_str" ]]; then
            echo "$chp"
            cd "$chp"
            return
        fi
        echo "$c_error_str_old" >&2
    fi
    echo "$c_error_str" >&2
    return 1
}

# Modern linux boxes' dmesg have the -T option, but I'm not removing this
# function just in case, but if I don't need it in a few years I will.
dmesg_with_human_timestamps () {
    $(type -P dmesg) "$@" | perl -w -e 'use strict;
        my ($uptime) = do { local @ARGV="/proc/uptime";<>}; ($uptime) = ($uptime =~ /^(\d+)\./);
        foreach my $line (<>) {
            printf( ($line=~/^\[\s*(\d+)\.\d+\](.+)/) ? ( "[%s]%s\n", scalar localtime(time - $uptime + $1), $2 ) : $line )
        }'
}
alias dmesg='dmesg -T'

# Func to create a `tad` (throw away directory).  Call this, it will spawn a
# new shell in the newly-created dir, and then when you exit the shell the
# directory is deleted with everything inside of it.
tad() {
    local d="$HOME/.throw-away"
    if [[ -e "$d" ]]; then
        echo "Throw away directory already exists: $d" >&2
    else
        mkdir $d
        (cd $d; bash)
        echo "Exiting a TAD: rm -r $d"
        rm -r $d
    fi
}

alias t='tmux new -A'

# Git aliases, same everywhere.
alias gs='git status'
alias gb='git remote -v;git branch -v'
alias gg='git checkout'
alias gt='git log --graph --decorate --pretty=oneline --abbrev-commit'
alias gd='git icdiff'
alias gdn='git icdiff --name-only'
alias gp='git pull --ff-only'
alias gpu='git push'
alias ga='git add'
alias gc='git commit'

# Git branch from:
#    http://aaroncrane.co.uk/2009/03/git_branch_prompt/
# Everything is in the shell, no forks, accounts for bad format, var includes
# the `[` and `]` or is empty.
function find_git_branch {
    local dir=. head
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            head=$(< "$dir/.git/HEAD")
            if [[ $head == ref:\ refs/heads/* ]]; then
                git_branch="[${head#*/*/}]"
            elif [[ $head != '' ]]; then
                git_branch='[(detached)]'
            else
                git_branch='[(unknown)]'
            fi
            return
        fi
        dir="../$dir"
    done
    git_branch=''
}

# Clear the PROMPT_COMMAND, done before PS1 (which uses `ret).
export PROMPT_COMMAND='ret=$?;find_git_branch'

# Set the fancy prompt, start by removing what was there.
# And move the cursor to the start:
#    http://jonisalonen.com/2012/your-bash-prompt-needs-this/
PS1="\[\e[00;00m\]\[\e[G\]"
# Just for Debian set var with chroot you're in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot="$(cat /etc/debian_chroot) "
fi
PS1="${PS1}${debian_chroot:+($debian_chroot)}"
# Add the return code and time.
function returnCodeColor {
    if [[ $1 -eq 0 ]]; then
        echo "00m"
    else
        echo "41m"
    fi
}
PS1="${PS1}"'\[\e[00;$(returnCodeColor $ret)\]${ret}\[\e[00;00m\] \[\e[00;33m\]\D{%H:%M}\[\e[00m\] '
# Add (user and) host, but not for root.
if [[ $EUID -eq 0 ]]; then
    PS1="$PS1"'\[\e[01;31m\]\h '
else
    PS1="$PS1"'\[\e[01;32m\]\u@\h\[\e[00m\]:'
fi
export PROMPT_DIRTRIM=3  # Only disp last 3 dirs with \w in bash > v4.
export PS1="$PS1"'\[\e[01;34m\]\w\[\e[00;34m\]'"\$git_branch"'\$\[\e[00m\] '

[ -f "$HOME/.motd" ] && cat "$HOME/.motd"
