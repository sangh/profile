#!/usr/local/bin/python3

help_ = """
Usage:  sumlines [--help] [--date YYYY-MM-DD | --json] [--] [filename]

    If no arguments are given, read lines from stdin, discard blank
    lines, expect non-blank lines to start with a float followed by
    white space, and then print the sum of all those floats (plus a
    newline) to stdout.

    Any errors or warnings are printed to stderr.  If a file name
    if given read from that file and do not read stdin at all.
    
    If either --date or --json is provided, input lines are mostly 
    expected to contain a date somewhere in the line after the
    initial float and white space.  Dates should be in YYYY-MM-DD
    format (surrounded by white space or beginning or end of line),
    but the format DDMonYY where Mon is the 3-letter capitalized
    abbreviation of the month name (like Apr for April, using
    strptime's %b format specifier) is also accepted for backwards
    compatibility.  The whole format string that is passed to
    strptime is "%d%b%y".

    Input lines have leading and trailing white space removed and
    are then split on runs of white space, and then any parts returned
    (with warnings or in the JSON) are joined with a single space
    (this effectively removes all consecutive white space).

    --date YYYY-MM-DD  (cannot be combined with --json)
        Floats from lines with dates after the given date are not
        included in the sum and a warning is printed to stderr.
        Lines without a date are included in the sum and no warning
        is printed.

    --json  (cannot be combined with --date)
        Print JSON to stdout.  Lines without a date and a non-zero
        initial float are errors.  The returned JSON is an object with
        two keys, "total" and "lines".  The value of "total" is a
        decimal of the total of all floats in "lines".  The value of
        "lines" is an array of lines from the input, sorted by date
        (with lines with no date or the initial float is zero are kept
        in place), each one an array of 4 elements:

            1) The float from the line.
            2) The description (everything after the float and white
               space until the date, or end of line if the line
               does not contain a date).
            3) The date in YYYY-MM-DD format (or an empty string).
            4) The calculation (everything after the date or an empty
               string).

    --
        Take the argument after this to be a file name even if it
        starts with a hyphen (for instance you could pass a file
        named "--help" using this).

    -?
    -h
    --help
        Print this help to stderr and exit.
"""

import datetime, json, sys, re

def wrn(s, prefix="WARNING: "):
    print(f"{prefix}{s}", file=sys.stderr)

def err(s):
    wrn(f"{help_}\n\nERROR: {s}", prefix="")
    sys.exit(1)

arg_file = None
arg_file_next = False
arg_json = False
arg_date = False
arg_date_next = False

for arg in sys.argv[1:]:
    if len(arg) < 1:
        err("Blank argument given.")
    elif arg_date_next:
        arg_date_next = False
        if arg_date:
            err(f"Second date given: {arg}")
        arg_date = datetime.date.fromisoformat(arg).isoformat()
    elif arg_file_next or arg[0] != "-":
        if arg_file:
            err(f"Second file name given: {arg}")
        arg_file = arg
    elif arg == "--date":
        arg_date_next = True
    elif arg == "--json":
        if arg_json:
            err("Argument --json given a second time.")
        arg_json = True
    elif arg == "--":
        arg_file_next = True
    elif arg in ("-?", "-h", "--help"):
        wrn(help_, prefix="")
        sys.exit(0)
    else:
        err(f"Unknown flag: {arg}")

if arg_date_next:
    err("Argument --date given without the date following it.")
if arg_json and arg_date:
    err("Arguments --date and --json cannot be combined.")

parse_line_date_regex = re.compile(
        r"\d{2}"
        r"(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"
        r"\d{2}|\d{4}-[01]\d-[0123]\d"
        )
def parse_line(line):
    """Parse line into 4-tuple or throw.
    The returned 4-tuple is (float(value), str(desc) or '',
    "YYYY-MM-DD" or '', str(calc) or '').
    If the float is approx. zero, the rest of the line becomes the
    description.
    """
    line_split = line.split()
    amt = float(line_split[0])
    date = ''
    for date_idx in range(len(line_split)-1, 1, -1):
        if parse_line_date_regex.match(line_split[date_idx]):
            try:
                date = datetime.date \
                        .fromisoformat(line_split[date_idx]) \
                        .isoformat()
                break
            except Exception as exp:
                try:
                    date = datetime.datetime \
                            .strptime(line_split[date_idx], "%d%b%y") \
                            .date().isoformat()
                    break
                except Exception as exp:
                    continue

    if amt and date:
        return (
            amt,
            ' '.join(line_split[1:date_idx]),
            date,
            ' '.join(line_split[(date_idx+1):]),
            )
    else:
        return (amt, ' '.join(line_split[1:]), '', '')

if arg_file:
    arg_file = open(arg_file, "r")
else:
    arg_file = sys.stdin

total = 0.0
json_list = []
for line_raw in arg_file:
    line = line_raw.strip()
    if not line:
        continue
    line = parse_line(line)
    if arg_date and line[2] and line[2] > arg_date:
        wrn(f"Not using future line: {line[0]!r} {' '.join(line[1:])}")
    else:
        total = total + line[0]
        if arg_json:
            # We can't append and then sort because there could be
            # lines without a sort key (a date) and we want them to
            # stay in place.  We could define our own compare function
            # but that would be slower than this because the input is
            # already mostly sorted and there are not many comments,
            # so most of the time we are doing one compare and an appened.
            if not line[2] or not json_list:
                json_list.append(line)
            elif json_list[-1][2] and json_list[-1][2] <= line[2]:
                json_list.append(line)
            else:  # The very slow way, starts from the begining.
                # line[2] exists (checked in the 1st if), but any of the dates
                # in this list may not exist (in which case insert after).
                for i in range(len(json_list)):
                    if not json_list[i][2]:
                        continue
                    if line[2] < json_list[i][2]:
                        json_list[i:i] = [line]
                        break
                else:
                    json_list.append(line)

arg_file.close()

if arg_json:
    print(json.dumps({'total': total, 'lines': json_list}))
    #output_lines = []
    #for line in json_list:
        #output_line = []
        #for i in line:
            #output_line.append(repr(i))
        #output_lines.append('[' + ', '.join(output_line) + ']')
    #print(f'{{"total": {total}, "lines": [{", ".join(output_lines)}]}}')
else:
    print(f'{total:.2f}')


# TODO test speed with and without try and the regex search.


html_part = """
<style type="text/css">
    table#ledger {
        table-layout: fixed;
        border-style: none;
    }
    td {
        vertical-align: text-top;
        padding-bottom: 5px;
        padding-right:  5px;
    }
    .amt { text-align: right; }
    .date { text-align: center; }
    .desc { text-align: left; }
    .expl { text-align: left; }
</style>
"""
more_html = '''
    print("""\n<table id="ledger">""")
    for line in lineStore:
        it = list(map(str_tr, line[1:]))
        print("\t<tr>")
        print("""\t\t<td class="amt">%.2f</td>""" % (line[0], ))
        print("""\t\t<td class="date">%s</td>""" % (it[1], ))
        print("""\t\t<td class="desc">%s</td>""" % (it[0], ))
        print("""\t\t<td class="expl">%s</td>""" % (it[2], ))
        print("\t</tr>")
    print("</table>")
'''
