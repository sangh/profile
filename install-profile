#!/bin/bash

HELP_STR="Install sangh/profile or check if installed.

This script takes no arguments.  It checks if the profile (in this directory)
should be installed and does so.  Tne following files may be touched:

    ~/.bashrc
    ~/.vimrc
    ~/.tmux.conf

and some warnings are printed if some programs or links are not found.

The file ~/.inputrc is checked to not exist (if it does the global one ins't
used) because it can be read from bashrc and then can be within an if block.

Neovim puts config files in different places from vim, so we check that the
symlinks that link the vim places point to the neovim places.

If this is called as a non-root user then things are sourced directly form
the three files above.  If \$USER is root then the sourcing in the three
files above happens inside an if statement (with code to check if the user
used sudo or su).  Unless the three files above are modified (either to change
the checked user names for names that may sudo or su or to remove the if
statements) then re-logging in as root will appear to have no effect.
"

if [[ $# -ne 0 ]]; then
    echo "$HELP_STR"
    exit 1
elif [[ -z "$USER" || -z "$HOME" ]]; then
    echo "ERROR: Either \$USER or \$HOME is empty or unset."
    exit 1
fi

ADDED_BY_LINE="# Added by sangh/profile."
ADDED_BY_LINE_VI="\"${ADDED_BY_LINE:1}"

DOT_TMUX_CONF=$(cat << EOF
${ADDED_BY_LINE}
bind-key Space next-window
set -s escape-time 0
set-option -g renumber-windows on
EOF
)

if grep "^\\s*${ADDED_BY_LINE}\\s*\$" "$HOME/.tmux.conf" >&/dev/null; then
    echo "---> Found \"${ADDED_BY_LINE}\" in \".tmux.conf\"."
elif [[ "$USER" == "root" ]]; then
    echo "Appending conditional stuff to \"$HOME/.tmux.conf\"."
    (   echo '%if #{==:#{SUDO_USER},user1}'
        echo "$DOT_TMUX_CONF" | sed -e 's/^/    /'
        echo '%elif #{==:#{SUDO_USER},user2}'
        echo "$DOT_TMUX_CONF" | sed -e 's/^/    /'
        echo '%endif'
    ) >> "$HOME/.tmux.conf"
else
    echo "Appending stuff to \"$HOME/.tmux.conf\"."
	echo "$DOT_TMUX_CONF" >> "$HOME/.tmux.conf"
fi

if [[ -f "$HOME/.inputrc" ]]; then
    echo "WARNING: \".inputrc\" exists, so \"/etc/inputrc\" is ignored."
else
    echo "---> Found that \".inputrc\" does not exist."
fi

DOT_BASHRC_SUDO_USER_SCRIPT=$(cat << 'EOF'
# This script tries to figure out which user used sudo or su to get root
# by going up the proc hierarchy until a non-root user is found.
# For most machines this should already be set (if propagated via SSH).
if [[ -z "$SUDO_USER" ]]; then
    current_pid="self"
    current_uid="0"
    while [[ "$current_uid" == "0" && "$current_pid" != "0" ]] ; do
        current_uid=$(\awk '/^Uid:/ {print $2}' "/proc/${current_pid}/status")
        current_pid=$(\awk '/^PPid:/ {print $2}' "/proc/${current_pid}/status")
    done

    export SUDO_USER=$(\id -nu "$current_uid")

    unset current_pid
    unset current_uid
fi
echo "$(date --iso-8601=seconds): $SUDO_USER" >> /var/log/sudo_user_login.log
EOF
)

DOT_BASHRC=$(cat << EOF
${ADDED_BY_LINE}
[[ \$- != *i* ]] && return  # Don't do anything unless bash is interactive.
. "$HOME/profile/bashrc_common"
bind -f "$HOME/profile/inputrc_common"
EOF
)

if grep "^\\s*${ADDED_BY_LINE}\\s*\$" "$HOME/.bashrc" >&/dev/null; then
    echo "---> Found \"${ADDED_BY_LINE}\" in \".bashrc\"."
elif [[ "$USER" == "root" ]]; then
    echo "Appending conditional stuff to \"$HOME/.bashrc\"."
    (   echo "$DOT_BASHRC_SUDO_USER_SCRIPT"
        echo
        echo 'if [[ "$SUDO_USER" == "user1" ]]; then'
        echo "$DOT_BASHRC" | sed -e 's/^/    /'
        echo 'elif [[ "$SUDO_USER" == "user2" ]]; then'
        echo "$DOT_BASHRC" | sed -e 's/^/    /'
        echo 'fi'
    ) >> "$HOME/.bashrc"
else
    echo "Appending stuff to \"$HOME/.bashrc\"."
	echo "$DOT_BASHRC" >> "$HOME/.bashrc"
fi

if [[ -d "$HOME/bin" ]]; then
    echo "---> Found directory \"bin\"."
else
    echo "Making dir \"$HOME/bin\"."
    mkdir "$HOME/bin"
fi

if [[ -d "$HOME/bin/src" ]]; then
    echo "---> Found directory \"bin/src\"."
else
    echo "Making dir \"$HOME/bin/src\"."
    mkdir "$HOME/bin/src"
fi

if [[ -e "/usr/local/bin/python3" ]]; then
    echo "---> Found \"/usr/local/bin/python3\"."
else
    echo "WARNING: It appears \"/usr/local/bin/python3\" does not exist."
fi

progs_found=""
for p in progress entr icdiff combine; do
    if type -t "${p}" >/dev/null; then
        progs_found="${progs_found}\"${p}\" "
    else
        echo "WARNING: The program \"${p}\" not found."
    fi
done
echo "---> Found programs: ${progs_found}."

# For Neovim (but will work with regular vim) you need a bunch of symlinks:
#    .vimrc -> .config/nvim/init.vim
#    .vim -> .local/share/nvim/
#    .local/share/nvim/autoload -> site/autoload/

if [[ -e "$HOME/.vimrc" ]]; then
    if [[ "$(readlink "$HOME/.vimrc")" == ".config/nvim/init.vim" ]]; then
        echo "---> Found linked \".vimrc\"."
    else
        echo "WARNING: \".vimrc\" not linked to the right place."
    fi
else
    echo "Making dir \"$HOME/.config/nvim\"."
    mkdir -p "$HOME/.config/nvim"

    echo "Touch \"$HOME/.config/nvim/init.vim\"."
    touch "$HOME/.config/nvim/init.vim"

    echo "Linking \".config/nvim/init.vim\" from \"$HOME/.vimrc\"."
    ln -s ".config/nvim/init.vim" "$HOME/.vimrc"
fi

if [[ -e "$HOME/.vim" ]]; then
    if [[ "$(readlink "$HOME/.vim")" == ".local/share/nvim" ]]; then
        echo "---> Found linked \".vim\"."
    else
        echo "WARNING: \".vim\" not linked to the right place."
    fi
else
    echo "Linking \".local/share/nvim\" from \"$HOME/.vim\"."
    ln -s ".local/share/nvim" "$HOME/.vim"
fi

if [[ -e "$HOME/.vim/autoload" ]]; then
    if [[ "$(readlink "$HOME/.vim/autoload")" == "site/autoload" ]]; then
        echo "---> Found linked \".vim/autoload\"."
    else
        echo "WARNING: \".vim/autoload\" not linked to the right place."
    fi
else
    echo "Making dir \"$HOME/.vim/site/autoload\"."
    mkdir -p "$HOME/.vim/site/autoload"

    echo "Linking \"site/autoload\" from \"$HOME/.vim/autoload\"."
    ln -s "site/autoload" "$HOME/.vim/autoload"
fi

DOT_VIMRC=$(cat << EOF
${ADDED_BY_LINE_VI}
source $HOME/profile/vimrc_common
EOF
)

DOT_VIMRC_USER2=$(cat << 'EOF'
set nocompatible  " Must be first: use Vim defaults (much better!)
set tabstop=4  " set the tab stop, duh!
set shiftwidth=4  " the autoindent stuff
set softtabstop=4  " Also sts
set expandtab  " So we get spaces.
set shiftround  " Use muliple of shiftwith with <>
syntax on
colorscheme desert
set mouse=r
EOF
)

if grep "^\\s*${ADDED_BY_LINE_VI}\\s*\$" "$HOME/.vimrc" >&/dev/null; then
    echo "---> Found '${ADDED_BY_LINE_VI}' in \".vimrc\"."
elif [[ "$USER" == "root" ]]; then
    echo "Appending conditional stuff to \"$HOME/.vimrc\"."
    (   echo "if 'user1' == \$SUDO_USER"
        echo "$DOT_VIMRC" | sed -e 's/^/    /'
        echo "elseif 'user2' == \$SUDO_USER"
        echo "$DOT_VIMRC_USER2" | sed -e 's/^/    /'
        echo "endif"
    ) >> "$HOME/.vimrc"
else
    echo "Appending stuff to \"$HOME/.vimrc\"."
    echo "$DOT_VIMRC" >> "$HOME/.vimrc"
fi

if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
    echo "---> Found \".vim/autoload/plug.vim\"."
else
    if type -t "curl" >/dev/null; then
        curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    elif type -t "wget" >/dev/null; then
        wget -O "$HOME/.vim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    else
        echo "WARNING: Neither curl or wget found, cannot get vim-plug."
    fi
    if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
        vim -c ':PlugInstall|q!|q!'
    else
        echo "WARNING: Failed to get vim-plug."
    fi
fi

echo "---> Done."
